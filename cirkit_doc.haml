!!! 5
%html
  %head
    = Haml::Engine.new(File.read('_header.haml')).render(Object.new, :title => 'Mathias Soeken / CirKit Documentation')
    %link(href="css/highlight.css" rel="stylesheet")
    %script(src="js/highlight.js")
    %script(src="js/cirkit_highlight.js")

    %link(href="css/doc.css" rel="stylesheet")

  %body
    .container#main-container
      .row#main-row
        = Haml::Engine.new(File.read('_nav.haml')).render(Object.new, :page => "cirkit")
        .col-md-9.block
          .toc-float
            .toc.well
              .header
                .span.glyphicon.glyphicon-list
                Table of Contents
              .links
                %a(href="#getting-started") 1 Getting Started
                %br
                %a(href="#getting-started-running") 1.1 Running CirKit
                %br
                %a(href="#getting-started-stores") 1.2 Stores
                %br
                %a(href="#getting-started-logging") 1.3 Logging
                %br
                %a(href="#getting-started-aliases") 1.4 Aliases
                %br
                %a(href="#data-structures") 2 Data Structures
                %br
                %a(href="#data-structures-truth-tables") 2.1 Truth Tables
                %br
                %a(href="#data-structures-expressions") 2.2 Expressions
                %br
                %a(href="#data-structures-aigs") 2.3 And-inverter graphs (AIG)
                %br
                %a(href="#integration") 3 Integration with other tools
                %br
                %a(href="#integration-abc") 3.1 ABC
                /
                  %br
                  %a(href="#integration-quipper") 3.2 Quipper
          %h1 CirKit Documentation
          %p
            This is a documentation for the command line interface of CirKit.  Most of its content is also valid for the command line interface of RevKit.
          %h4 Table of Contents
          %ol
            %li
              %a(href="#getting-started") Getting Started
              %ol
                %li
                  %a(href="#getting-started-running") Running CirKit
                %li
                  %a(href="#getting-started-stores") Stores
                %li
                  %a(href="#getting-started-logging") Logging
                %li
                  %a(href="#getting-started-aliases") Aliases
            %li
              %a(href="#data-structures") Data Structures
              %ol
                %li
                  %a(href="#data-structures-truth-tables") Truth Tables
                %li
                  %a(href="#data-structures-expressions") Expressions
                %li
                  %a(href="#data-structures-aigs") And-inverter graphs (AIG)
            %li
              %a(href="#integration") Integration
              %ol
                %li
                  %a(href="#integration-abc") ABC
                /
                  %li
                    %a(href="#integration-quipper") Quipper
          %h2#getting-started 1 Getting Started
          %h3#getting-started-running 1.1 Running CirKit
          %p
            CirKit has a command-line interface. After calling
            %i build/programs/cirkit
            a shell prompt is printed to the screen. In order to see all available commands type
            %kbd help
            :plain
              .
            This prints a list with all commands together with a short description for each of them. To see more details about a command and its usage call the command together with the
            %kbd -h
            flag.  For example
            %kbd read_aiger -h
            prints options to read an AIGER file.
          %p
            CirKit can be called in three different modes:
            %ol
              %li
                %b Interactive mode:
                This is the default interactive mode that is described above.
              %li
                %b Bash mode:
                %kbd -c
                In this mode, commands are given to CirKit as command line arguments, e.g.,
                %pre
                  :preserve
                    build/programs/cirkit -c "read_aiger file.aig; cone -o y; simulate -at; quit"
                This example reads an AIGER from
                %i file.aig,
                reduces the network to the cone of output
                %i y,
                simulates the resulting network as truth table and quits. By adding the flag
                %kbd -e
                additionally each command is printed to the screen before execution, e.g.,
                %pre
                  :preserve
                    build/programs/cirkit -ec "read_aiger file.aig; cone -o y; simulate -at; quit"
                Note that single character command options (that start eith with a single
                %kbd -
                ) can be concatenated, e.g.,
                %kbd -e -c
                can be written as
                %kbd -ec
                :plain
                  .
              %li
                %b Batch mode:
                %kbd -f
                In this mode, commands are read line-by-line from a file, e.g.,
                %pre
                  :preserve
                    build/programs/cirkit -f command_file
                This mode also accepts the
                %kbd -e
                flag to print each command before execution.  It is possible to comment some commands in the command file by starting a line with a
                %b #
                character.
          %p
            Some of the main commands are:
            %table.table.table-bordered.table-condensed
              %thead
                %tr
                  %th Command
                  %th Description
              %tbody
                %tr
                  %td
                    %kbd alias
                  %td
                    Creates an
                    %a(href="#getting-started-aliases") alias
                %tr
                  %td
                    %kbd help
                  %td Shows all available commands
                %tr
                  %td
                    %kbd quit
                  %td Quits CirKit
                %tr
                  %td
                    %kbd set
                  %td Sets (internal) environment variables
          %h3#getting-started-stores 1.2 Stores
          %p
            Shared data in CirKit such as circuits or truth tables are stored in
            %i stores
            and commands can access the data from them.  Each data structure has its own store and each store can hold more than one element.  For example, there are seperate stores for truth table, AIGs, and BDDs. Call
            %kbd store -h
            to see all available stores. Each store comes with its own
            %i command flag
            to access it, e.g.,
            %kbd -a
            for AIGs and
            %kbd -t
            for truth tables.  Although a store can hold more than one element, it is not necessary and possible to specify which store element to access.  Instead each store indivually has a pointer to the
            %i current store element
            and commands always access this one.  In order to access a different store element, one can change the pointer using the command
            %kbd current
            :plain
              .
            For example,
            %kbd current -a 1
            will set the pointer in the AIG store to the element with index 1 (which is the second element in the store).
          %h4 Example
          %pre
            :preserve
              read_aiger file1.aig
              read_aiger file2.aig
              store --show -a
              read_aiger -n file3.aig
              store --show -a
              current -a 0
              store --clear -a
          %p
            First
            %i file1.aig
            is read into the AIG store. The second command reads
            %i file2.aig
            and
            %u overrides
            the current entry.  Overriding the current store element is the default behavior of most commands. The current content of a store can be displayed with
            %kbd store --show -a
            or
            %kbd store -a
            as a short-hand. In the third line of the example, one AIG is in the store. When passing the flag
            %kbd -n
            to read_aiger as in the fourth command a new entry is added to the store and the current index is updated to the new entry, i.e., at this time the AIG store contains two elements with the current element being the second one (index 1). With
            %kbd current -a 0
            the current index is reset to 0 and
            %kbd store --clear -a
            clears the store from all AIGs.
          %p
            For many commands it is clear which store they access and it's not necessary to specify the store.  There are some
            %i generic commands
            which work on all data structures and require to pass the store access flag, e.g., the command
            %kbd store
            :plain
              .
            The generic commands are:
            %table.table.table-bordered.table-condensed
              %thead
                %tr
                  %th Command
                  %th Description
              %tbody
                %tr
                  %td
                    %kbd convert
                  %td Converts store elements into other types, e.g., AIGs to BDDs
                %tr
                  %td
                    %kbd current
                  %td Changes the current store pointer
                %tr
                  %td
                    %kbd print
                  %td
                    Prints a textual ASCII representation of the current store element
                %tr
                  %td
                    %kbd ps
                  %td
                    Prints statistical information about the current store element
                %tr
                  %td
                    %kbd show
                  %td
                    Visualizes the current store element (writes to a
                    %i dot
                    file)
                %tr
                  %td
                    %kbd store
                  %td
                    Shows and clears elements from the store
          %h3#getting-started-logging 1.3 Logging
          %p
            Passing
            %kbd -l file.log
            to cirkit creates a log file of the session. This option is particularly useful in batch mode. The log file contains a JSON array with an entry for each command. Each entry contains at least the full command that was run and the time at which the command was started to execute. Some commands write additional data into the log file. For example,
            %kbd ps -a
            writes number of inputs, outputs, and AND gates of an AIG, and
            %kbd quit
            writes several information about the computer on which CirKit has been executed. Being a JSON array, the log file can be easily parsed as many programming languages have a JSON library.
          %p
            Some helper functions to parse the log file and, e.g., create ASCII tables from them can be found in
            %i utils/experiments.py.
            Further, the Python program
            %i utils/extract_script.py
            extracts a CirKit script file from the the log that can be run in batch mode. This can be helpful when logging an interactive session and then rerunning the commands:
          %pre
            :preserve
              $ cirkit -l session.log
              cirkit> read_aiger file.aig
              cirkit> ps -a
              ...
              cirkit> quit
              $ utils/extract_script.py session.log > session.cs
              $ cirkit -f session.cs
          %p
            For performing experimental evaluations, the following workflow is suggested. Create two Python programs (or any other programming language) called
            %i make_script.py
            and
            %i make_table.py.
            The program
            %i make_script.py
            writes a CirKit script. The program
            %i make_table.py
            reads the log file created for the script and prints out a table:
          %pre
            :preserve
              $ ./make_script.cs experiments.cs
              $ cirkit -f experiments.cs -l experiments.log
              $ ./make_table.cs experiments.log
          %h3#getting-started-aliases 1.4 Aliases
          %p
            The command
            %kbd alias
            allows to create aliases, which are shortcuts to commands or sequences of commands.  The best place for aliass is the init file
            %i alias
            located in the directory that is specified in the
            %code $CIRKIT_HOME
            environment variable. It is recommended to set
            %code $CIRKIT_HOME
            to the root directory of CirKit. Examples for entries in an alias file are:
            %pre
              :preserve
                alias e2t "convert --expr_to_tt"
            The alias command gets two arguments, the
            %i key
            and the
            %i value
            that is used for substituion.  If the key or the value contain a space they need to be put into quotes, and internal quotes need to be escaped.
          %p
            Note that they key can be any regular expression with capture groups and that the value is a formatted string that can contain placeholders for each capture string:
            %code %1%
            for the first capture group,
            %code %2%
            for the second one and so on.  Note that the
            %code %
            sign needs to be escaped.  A more complex example is an alias to read a Verilog file into an AIG using ABC:
            %pre
              :preserve
                alias "abc_verilog (.*)" "abc -c \"%%read %1%; %%blast\""
            This will translate, e.g., the command
            %kbd abc_verilog file.v
            into
            %pre
              :preserve
                abc -c "%read file.v; %blast"
          %p
            Since the key is any regular expression, we can create aliases which are very expressive.  The alias
            %pre
              :preserve
                alias "(\\w+) > (\\w+)" "convert --%1%_to_%2%"
            allows, e.g., to convert a truth table into an AIG using
            %kbd tt > aig
            :plain
              .
            Putting everything together we can write scripts in CirKit such as
            %pre
              :preserve
                abc_verilog file.v
                aig > bdd
                bdd -c
            which reads a Verilog file into a CirKit AIG using ABC's API, then converts the AIG into a BDD and finally computes the characteristic function of the BDD.
          %p
            Aliases are also useful inside scripts when they are only required locally.
            Consider, e.g., one wants to convert several truth tables into AIGs, optimize them, and then write them into a file.
            A script for this task could look as follows:
            %pre
              :preserve
                alias "tt_aig_prog ([01]+)" "tt %1%; tt > aig; abc -c &dc2; ps -a; write_aiger %1%.aag"
                tt_aig_prog 11101000
                tt_aig_prog 01011101
                tt_aig_prog 0110
                tt_aig_prog 1001100111010111
                tt_aig_prog 1101110011000000
          %h2#data-structures 2 Data Structures
          %p
            CirKit (and RevKit) provide the analysis and manipulation of several data structures.
            These data structures are explained in this section.
            As described above, instances of these data structures are stored in individual stores.
            Not all data structures are available in both CirKit and RevKit.
            The following table gives an overview over the existing data structures, their access option for the store, and their availability in CirKit and RevKit.
          %table.table.table-bordered
            %thead
              %tr
                %th Data structure
                %th Access option
                %th CirKit
                %th RevKit
            %tbody
              %tr
                %td Truth table
                %td
                  %kbd -t
                  %kbd --tt
                %td.check-column
                  %span.glyphicon.glyphicon-ok
                %td
              %tr
                %td Expression
                %td
                  %kbd -e
                  %kbd --expr
                %td.check-column
                  %span.glyphicon.glyphicon-ok
                %td.check-column
                  %span.glyphicon.glyphicon-ok
              %tr
                %td And-inverter graph (AIG)
                %td
                  %kbd -a
                  %kbd --aig
                %td.check-column
                  %span.glyphicon.glyphicon-ok
                %td.check-column
                  %span.glyphicon.glyphicon-ok
              %tr
                %td Majority-inverter graph (MIG)
                %td
                  %kbd -m
                  %kbd --mig
                %td.check-column
                  %span.glyphicon.glyphicon-ok
                %td
              %tr
                %td XOR majority graph (XMG)
                %td
                  %kbd -x
                  %kbd --xmg
                %td.check-column
                  %span.glyphicon.glyphicon-ok
                %td.check-column
                  %span.glyphicon.glyphicon-ok
              %tr
                %td Binary decision diagram (BDD)
                %td
                  %kbd -b
                  %kbd --bdd
                %td.check-column
                  %span.glyphicon.glyphicon-ok
                %td.check-column
                  %span.glyphicon.glyphicon-ok
              %tr
                %td Reversible circuit
                %td
                  %kbd -c
                  %kbd --circuit
                %td
                %td.check-column
                  %span.glyphicon.glyphicon-ok
              %tr
                %td Reversible specification
                %td
                  %kbd -s
                  %kbd --spec
                %td
                %td.check-column
                  %span.glyphicon.glyphicon-ok
              %tr
                %td BDD of a characteristic reversible function (RCBDD)
                %td
                  %kbd -r
                  %kbd --rcbdd
                %td
                %td.check-column
                  %span.glyphicon.glyphicon-ok
          %h3#data-structures-truth-tables 2.1 Truth Tables
          %p
            Truth tables are bitstrings of length $2^k$ and represent Boolean functions over $k$ variables.
            The most significant bit is the first bit in the bitstring.
            For example, to load a truth table that represents the AND function $a \land b$, type
            %kbd tt 1000
            :plain
              .
            We assume that the least significant variable is $a$, then $b$, then $c$, and so on.
            The truth tables for $a$, $b$, and $c$ are therefore
            %code 10
            :plain
              ,
            %code 1100
            :plain
              ,
            and
            %code 11110000
            :plain
              .
            In order to meet size requirements, truth tables can be extended.  If, e.g.,
            %code 1011
            is the current truth table in store, the command
            %kbd tt -e 3
            extends the truth table to be defined over 3 variables, yielding
            %code 10111011
            :plain
              .
          %p
            On can convert truth tables into AIGs using
            %kbd convert --tt_to_aig
            :plain
              .
            This will construct an AIG in a very na&iuml;ve way by constructing each minterm explicitly and then ORing them all.
            Conversely, one can obtain truth tables from AIGs using simulation.  For this purpose use the command
            %kbd simulate
            with the flags
            %kbd -a
            to simulate from AIGs,
            %kbd -t
            to simulate to truth tables, and
            %kbd -n
            to store the simulatuion results.  The following example illustrates the usage for the
            %i c17
            benchmark from the ISCAS benchmark suite.  It also employs NPN canonization on the resulting truth tables using the command
            %kbd npn
            :plain
              .
          %h4 Example
          %pre
            %code.cirkit
              :preserve
                cirkit> read_aiger c17.aig
                cirkit> simulate -atn
                [i] G16 : 1011100011111000101110001111100010111000111110001011100011111000 (B8F8B8F8B8F8B8F8)
                [i] G17 : 0011001111111111001100001111000000110011111111110011000011110000 (33FF30F033FF30F0)
                [i] runtime: 0.00 secs
                cirkit> store -t
                [i] truth tables in store:
                     0: 1011100011111000101110001111100010111000111110001011100011111000
                  *  1: 0011001111111111001100001111000000110011111111110011000011110000
                cirkit> current -t 0
                cirkit> npn -t --approach 0
                [i] run-time: 0.89 secs
                [i] NPN class for 1011100011111000101110001111100010111000111110001011100011111000 is 0000000000000000000000000000111111110000111100001111111111111111
                [i] - phase: 1001010 perm: 5 4 1 3 0 2
                cirkit> current -t 1
                cirkit> npn -t --approach 0
                [i] run-time: 0.89 secs
                [i] NPN class for 0011001111111111001100001111000000110011111111110011000011110000 is 0000000000000000000000001111111100001111000011110000111111111111
                [i] - phase: 1001010 perm: 5 0 1 2 4 3
          %p
            The current truth table in the store corresponds to the last output of the AIG.
            Notice that truth table simulation only scales for AIGs with a small number of inputs.
            One can obtain a truth table from an expression using
            %kbd convert --expr_to_tt
            or its alias
            %kbd expr > tt
            :plain
              .
          %p
            Some truth table related commands are:
            %table.table.table-bordered.table-condensed
              %thead
                %tr
                  %th Command
                  %th Description
              %tbody
                %tr
                  %td
                    %kbd tt
                  %td Load and modify truth tables
                %tr
                  %td
                    %kbd npn
                  %td NPN canonization (exact and heuristic)
                %tr
                  %td
                    %kbd convert --tt_to_aig
                    , Alias:
                    %kbd tt > aig
                  %td Convert truth table to AIG
                %tr
                  %td
                    %kbd convert --expr_to_tt
                    , Alias:
                    %kbd expr > tt
                  %td Convert expression to truth table
                %tr
                  %td
                    %kbd simulate -atn
                  %td Simulates AIGs as truth table and stores them
                %tr
                  %td
                    %kbd simulate -mtn
                  %td Simulates MIGs as truth table and stores them
          %h3#data-structures-expressions 2.2 Expressions
          %p
            Expressions provide an easy way to enter Boolean functions into CirKit.
            The expressions are multi-level expressions that can contain constants (
            %code 0, 1
            ), Boolean variables (
            %code a, b, c, ...
            ), inversion (
            %code !
            ), binary AND (
            %code ()
            ), binary OR (
            %code {}
            ), binary XOR (
            %code []
            ), and ternary MAJ (
            %code <>
            ).
            The whole syntax is given as follows:
          %p
            %samp
              %var
                %u expr
              :plain
                ::= 0 | 1 |
              %var
                %u var
              :plain
                | !
              %var
                %u expr
              :plain
                | (
              %var
                %u expr
              %var
                %u expr
              :plain
                ) | {
              %var
                %u expr
              %var
                %u expr
              :plain
                } | [
              %var
                %u expr
              %var
                %u expr
              :plain
                ] | <
              %var
                %u expr
              %var
                %u expr
              %var
                %u expr
              :plain
                >
            %samp
              %var
                %u var
              :plain
                ::= a | b | c | ...
          %p
            Note that
            %code a
            always corresponds to the least significant bit,
            %code b
            to the second least significant bit, and so on.
            Expressions can be loaded into its store (access flag
            %kbd -e
            ) using the command
            %kbd expr
            :plain
              .
            Expressions can be used as starting point to create truth tables (
            %kbd expr > tt
            ) or binary decision diagrams (
            %kbd expr > bdd
            ) for simple functions and avoid to create a file.
            The following example illustrates its usage.
          %h4 Example
          %pre
            %code.cirkit
              :preserve
                cirkit> expr (ab)
                cirkit> expr > tt
                cirkit> print -t
                1000
                cirkit> expr !{ac}
                cirkit> expr > tt
                cirkit> print -t
                00000101
                cirkit> expr {{(ab)(ac)}(bc)}
                cirkit> expr > tt
                cirkit> print -t
                11101000
                cirkit> expr <abc>
                cirkit> expr > tt
                cirkit> print -t
                11101000
          %p
            Note that when loading
            %code !{ac}
            the resulting truth table represents a 3-variable Boolean function which does not functially depend on the value for
            %code b
            :plain
              .
            The last two examples are both Boolean expressions for MAJ, the majority-of-three function.
          %p
            Some commands related to expressions are:
            %table.table.table-bordered.table-condensed
              %thead
                %tr
                  %th Command
                  %th Description
              %tbody
                %tr
                  %td
                    %kbd expr
                  %td Load expressions
                %tr
                  %td
                    %kbd convert --expr_to_tt
                    , Alias:
                    %kbd expr > tt
                  %td Convert expression to truth table
                %tr
                  %td
                    %kbd convert --expr_to_bdd
                    , Alias:
                    %kbd expr > bdd
                  %td Convert expression to binary decision diagram
          %h3#data-structures-aigs 2.3 And-inverter graphs (AIG)
          %h4 Getting an AIG into CirKit
          %p
            There are several ways to an AIG into CirKit. If the AIG is represented as AIGER file with extension
            %code *.aig
            if in binary format and
            %code *.aag
            if in ASCII format, one can use the command
            %kbd read_aiger
            to parse the file and create an AIG in the store.
            If already an AIG is in the store, it will be overriden, unless one calls
            %kbd read_aiger -n
            :plain
              .
            If the AIG is represented in Verilog such that ABC's command
            %kbd %read
            is able to parse it, one can use
            %kbd read_verilog -a
            to read the Verilog file, convert it into an AIG and put it into the store.
            Also BENCH files can be read into AIGs with the command
            %kbd read_bench
            :plain
              .
            The command
            %kbd tt > aig
            allows to translate the current truth table into an AIG.  Internally, ABC's API will be used for that purpose and the AIG is optimized using
            %kbd dc2
            :plain
              .
          %p
            This summary lists commands to get AIGs into CirKit:
            %table.table.table-bordered.table-condensed
              %thead
                %tr
                  %th Command
                  %th Description
              %tbody
                %tr
                  %td
                    %kbd read_aiger
                  %td Read AIG from binary or ASCII AIGER file
                %tr
                  %td
                    %kbd read_verilog -a
                  %td
                    Read AIG from Verilog file (using ABC's
                    %kbd %read
                    command
                %tr
                  %td
                    %kbd read_bench
                  %td Read AIG from BENCH file
                %tr
                  %td
                    %kbd convert --tt_to_aig
                    , Alias:
                    %kbd tt > aig
                  %td Convert truth table to AIG
          %h4 Manipulating the AIG
          %p
            ABC is a powerful tool for AIG optimization and manipulation and using the
            %a(href="#integration-abc") tight integration of CirKit with ABC
            using the command
            %kbd abc
            , it is very easy to use ABC to optimize AIGs in CirKit directly.
            Hence, few commands in CirKit exist to perform AIG optimization, but mainly utility commands.
          %p
            This list some commands in CirKit to manipulate an AIG:
            %table.table.table-bordered.table-condensed
              %thead
                %tr
                  %th Command
                  %th Description
              %tbody
                %tr
                  %td
                    %kbd cone
                  %td Extracts AIG based on output cones
                %tr
                  %td
                    %kbd cuts -a
                  %td Performs cut enumeration
                %tr
                  %td
                    %kbd rename
                  %td Renames inputs and outputs
                %tr
                  %td
                    %kbd shuffle -a
                  %td Shuffles I/O of an AIG
                %tr
                  %td
                    %kbd strash
                  %td Strashes an AIG (removes dangling nodes)
                %tr
                  %td
                    %kbd unate
                  %td Computes unateness properties and functional dependencies of the AIG
          %h4 Writing an AIG
          %p
            AIGs can be written into AIGER files (only in ASCII format) using
            %kbd write_aiger
            or into Verilog files using
            %kbd write_verilog -a
            :plain
              .
          %p
            This summary lists commands to write AIGs:
            %table.table.table-bordered.table-condensed
              %thead
                %tr
                  %th Command
                  %th Description
              %tbody
                %tr
                  %td
                    %kbd write_aiger
                  %td Write AIG to ASCII AIGER file
                %tr
                  %td
                    %kbd write_verilog -a
                  %td
                    Write AIG to Verilog file
          %h2#integration 3 Integration
          %p
            CirKit offers functions to interact with certain tools.
            This section shows with which tools CirKit interacts well and gives some illustrative examples.
          %h3#integration-abc 3.1 ABC
          %p
            CirKit is tightly integrated with ABC.  ABC can be accessed as a subshell inside CirKit with the command
            %kbd abc
            :plain
              .
            If an AIG is present in CirKit's AIG store, it will be copied to the ABC subshell and available in the &-space (ABC9 commands).  Furthermore, when leaving the ABC subshell using
            %kbd quit
            ABC's AIG will be copied back to CirKit and replace the current AIG in the store (unless
            %kbd abc
            is called with the option
            %kbd -n
            ).  The following example illustrates this interaction in which an AIG is copied to ABC in order to optimize it and then copied back:
            %pre
              %code.cirkit
                :preserve
                  cirkit> read_aiger c432.aig
                  cirkit> ps -a
                  [i]                 c432: i/o =      36 /       7  and =     136  lev =   25
                  cirkit> abc
                  UC Berkeley, ABC 1.01 (compiled Apr 22 2016 19:45:32)
                  abc 01> &ps
                  c432     : i/o =     36/      7  and =     136  lev =   25 (19.14)  mem = 0.00 MB
                  abc 01> &dc2
                  abc 01> &ps
                  c432     : i/o =     36/      7  and =     123  lev =   25 (19.14)  mem = 0.00 MB
                  abc 01> quit
                  cirkit> ps -a
                  [i]                 c432: i/o =      36 /       7  and =     123  lev =   25
                  cirkit> quit
          /%h3#integration-quipper 3.2 Quipper
    %script(src="js/jquery.min.js")
    %script(src="js/cirkit_doc.js")
