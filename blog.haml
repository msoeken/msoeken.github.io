!!! 5
%html
  %head
    = Haml::Engine.new(File.read('_header.haml')).render(Object.new, :title => 'Mathias Soeken / Quantum Oracle Circuits and the Christmas Tree Pattern')
  %body
    .container#main-container
      .row#main-row
        = Haml::Engine.new(File.read('_nav.haml')).render(Object.new, :page => "blog")
        .col-md-9.block
          %h1 Blog
          .pitems
            .pitem
              .pubmain(style="min-height:0px")
                %a(href="https://devblogs.microsoft.com/qsharp/the-autosubstitution-rewrite-step/" target="_blank")
                  %h4.pubtitle The AutoSubstitution rewrite step
                .project-description
                  July 13, 2021, written for the Q# blog
                .project-description
                  %i
                    The new Microsoft.Quantum.AutoSubstitution NuGet package makes it easier to replace operations with alternatives when targeting different simulators.
            .pitem
              .pubmain(style="min-height:0px")
                %a(href="https://devblogs.microsoft.com/qsharp/emulation-in-q/" target="_blank")
                  %h4.pubtitle Emulation in Q#
                .project-description
                  December 4, 2020, written for the Q# blog
                .project-description
                  %i
                    It can be helpful to implement Q# functions or operations directly in C# - either to access some API that is not directly accessible in Q# or to provide alternative implementations based on the context in which the Q# program is executed. This blog post describes techniques to programmatically replace a Q# function by another one.
            .pitem
              .pubmain(style="min-height:0px")
                %a(href="https://devblogs.microsoft.com/qsharp/build-your-own-q-simulator-part-3-a-circuit-diagram-builder-with-qpic/" target="_blank")
                  %h4.pubtitle Build your own Q# simulator &mdash; Part 3: A circuit-diagram builder with ⟨q|pic⟩
                .project-description
                  August 13, 2020, written for the Q# blog
                .project-description
                  %i
                    We implement a custom simulator that generates a quantum circuit diagram in the ⟨q|pic⟩ format from Q# program execution traces.
            .pitem
              .pubmain(style="min-height:0px")
                %a(href="https://devblogs.microsoft.com/qsharp/build-your-own-q-simulator-part-2-advanced-features-for-the-reversible-simulator/" target="_blank")
                  %h4.pubtitle Build your own Q# simulator &mdash; Part 2: Advanced features for the reversible simulator
                .project-description
                  June 2, 2020, written for the Q# blog
                .project-description
                  %i
                    This post is the second in a series on how to write your own Q# simulators. In this part we describe advanced features to extend the reversible simulator from the first post in the series.
            .pitem
              .pubmain(style="min-height:0px")
                %a(href="https://devblogs.microsoft.com/qsharp/build-your-own-q-simulator-part-1-a-simple-reversible-simulator/" target="_blank")
                  %h4.pubtitle Build your own Q# simulator &mdash; Part 1: A simple reversible simulator
                .project-description
                  May 8, 2020, written for the Q# blog
                .project-description
                  %i
                    Simulators are a particularly versatile feature of the QDK. This post is the first in a series that teaches you how to write your own simulators, thereby broadly extending the scope of Q#.
            .pitem
              .pubmain(style="min-height:0px")
                %a(href="blog_qac.html")
                  %h4.pubtitle Quantum Oracle Circuits and the Christmas Tree Pattern
                .project-description
                  December 19, 2018, written for the
                  %a(href="https://blogs.msdn.microsoft.com/visualstudio/2018/11/15/q-advent-calendar-2018/" target="_blank") Q# Advent Calendar
                .project-description
                  %i
                    The article is about decorating Christmas trees using the rotation gate complexity in oracle function synthesis.
